import 'package:dart_openai/dart_openai.dart';
import 'package:logger/logger.dart';
import 'ai_config.dart';

final logger = Logger();

class OpenAIService {
  static bool _isInitialized = false;
  
  /// Initialise le service OpenAI
  static Future<void> initialize() async {
    if (_isInitialized) return;
    
    try {
      logger.d('üîß Initialisation OpenAI...');
      logger.d('  - Cl√© API: ${AIConfig.openaiApiKey.substring(0, 10)}...');
      logger.d('  - Base URL: https://api.openai.com/v1');
      
      OpenAI.apiKey = AIConfig.openaiApiKey;
      OpenAI.baseUrl = 'https://api.openai.com/v1';
      
      _isInitialized = true;
      logger.d('‚úÖ Service OpenAI initialis√© avec succ√®s');
    } catch (e) {
      logger.e('‚ùå Erreur initialisation OpenAI: $e');
      rethrow;
    }
  }
  
  /// Am√©liore une requ√™te utilisateur avec l'IA
  static Future<String> enhanceQuery(String userQuery) async {
    try {
      await initialize();
      
      // Debug de la configuration
      AIConfig.debugConfig();
      
      // V√©rifier que la cl√© API est valide
      if (AIConfig.openaiApiKey == 'YOUR_OPENAI_API_KEY' || AIConfig.openaiApiKey.isEmpty) {
        logger.w('‚ö†Ô∏è Cl√© API OpenAI non configur√©e, utilisation du fallback local');
        return _enhanceQueryLocally(userQuery);
      }
      
      // V√©rifier le format de la cl√© API
      if (!AIConfig.openaiApiKey.startsWith('sk-')) {
        logger.w('‚ö†Ô∏è Format de cl√© API invalide, utilisation du fallback local');
        return _enhanceQueryLocally(userQuery);
      }
      
      final completion = await OpenAI.instance.chat.create(
        model: AIConfig.openaiModel,
        messages: [
          OpenAIChatCompletionChoiceMessageModel(
            role: OpenAIChatMessageRole.system,
            content: '''
Tu es un assistant sp√©cialis√© dans l'am√©lioration de requ√™tes de recherche pour un marketplace d'objets d'occasion.
Ta mission est d'am√©liorer les requ√™tes utilisateur pour qu'elles soient plus pr√©cises et pertinentes.

R√®gles:
1. Garde le sens original de la requ√™te
2. Ajoute des synonymes pertinents
3. Pr√©cise les cat√©gories si ambigu√´
4. Ajoute des d√©tails techniques si n√©cessaire
5. Retourne UNIQUEMENT la requ√™te am√©lior√©e, sans explication

Exemples:
- "velo" ‚Üí "v√©lo bicyclette cycle VTT"
- "iphone pas cher" ‚Üí "iPhone smartphone Apple pas cher bon prix"
- "meuble salon" ‚Üí "meuble mobilier salon canap√© fauteuil table"
''',
          ),
          OpenAIChatCompletionChoiceMessageModel(
            role: OpenAIChatMessageRole.user,
            content: userQuery,
          ),
        ],
        maxTokens: 100,
        temperature: 0.3,
      );
      
      final enhancedQuery = completion.choices.first.message.content.trim();
      logger.d('üîç Requ√™te am√©lior√©e: "$userQuery" ‚Üí "$enhancedQuery"');
      
      return enhancedQuery;
    } catch (e) {
      logger.e('‚ùå Erreur am√©lioration requ√™te: $e');
      // En cas d'erreur, retourner la requ√™te originale avec des am√©liorations basiques
      return _enhanceQueryLocally(userQuery);
    }
  }
  
  /// Am√©lioration locale de la requ√™te (fallback)
  static String _enhanceQueryLocally(String query) {
    final queryLower = query.toLowerCase();
    final enhancements = <String>[];
    
    // Ajouter la requ√™te originale
    enhancements.add(query);
    
    // Am√©liorations basiques selon les mots-cl√©s
    if (queryLower.contains('iphone') || queryLower.contains('apple')) {
      enhancements.addAll(['smartphone', 'Apple', 'iOS']);
    }
    if (queryLower.contains('velo') || queryLower.contains('v√©lo') || queryLower.contains('bicyclette')) {
      enhancements.addAll(['v√©lo', 'bicyclette', 'cycle', 'VTT']);
    }
    if (queryLower.contains('meuble') || queryLower.contains('mobilier')) {
      enhancements.addAll(['meuble', 'mobilier', 'furniture']);
    }
    if (queryLower.contains('voiture') || queryLower.contains('auto')) {
      enhancements.addAll(['voiture', 'automobile', 'auto']);
    }
    if (queryLower.contains('telephone') || queryLower.contains('t√©l√©phone') || queryLower.contains('phone')) {
      enhancements.addAll(['t√©l√©phone', 'smartphone', 'mobile']);
    }
    if (queryLower.contains('ordinateur') || queryLower.contains('pc') || queryLower.contains('laptop')) {
      enhancements.addAll(['ordinateur', 'PC', 'laptop', 'computer']);
    }
    if (queryLower.contains('livre') || queryLower.contains('book')) {
      enhancements.addAll(['livre', 'book', 'roman', 'essai']);
    }
    if (queryLower.contains('vetement') || queryLower.contains('v√™tement') || queryLower.contains('habit')) {
      enhancements.addAll(['v√™tement', 'habit', 'vetement', 'clothing']);
    }
    
    logger.d('üîç Am√©lioration locale: "$query" ‚Üí "${enhancements.join(' ')}"');
    return enhancements.join(' ');
  }
  
  /// Extrait des entit√©s nomm√©es d'une requ√™te
  static Future<Map<String, dynamic>> extractEntities(String query) async {
    try {
      await initialize();
      
      final completion = await OpenAI.instance.chat.create(
        model: AIConfig.openaiModel,
        messages: [
          OpenAIChatCompletionChoiceMessageModel(
            role: OpenAIChatMessageRole.system,
            content: '''
Extrais les entit√©s nomm√©es de cette requ√™te de recherche pour un marketplace.
Retourne UNIQUEMENT un JSON avec ces champs:
{
  "category": "cat√©gorie principale",
  "brand": "marque si pr√©sente",
  "model": "mod√®le si pr√©sent", 
  "condition": "√©tat (neuf, bon √©tat, etc.)",
  "price_range": "gamme de prix",
  "location": "localisation",
  "features": ["caract√©ristiques sp√©cifiques"]
}
''',
          ),
          OpenAIChatCompletionChoiceMessageModel(
            role: OpenAIChatMessageRole.user,
            content: query,
          ),
        ],
        maxTokens: 200,
        temperature: 0.1,
      );
      
      final response = completion.choices.first.message.content.trim();
      final entities = Map<String, dynamic>.from(
        _parseJsonResponse(response),
      );
      
      logger.d('üîç Entit√©s extraites: $entities');
      return entities;
    } catch (e) {
      logger.e('‚ùå Erreur extraction entit√©s: $e');
      return {};
    }
  }
  
  /// Parse une r√©ponse JSON simple
  static Map<String, dynamic> _parseJsonResponse(String response) {
    try {
      // Nettoyer la r√©ponse
      final cleanResponse = response
          .replaceAll('```json', '')
          .replaceAll('```', '')
          .trim();
      
      // Parse basique - en production, utilisez dart:convert
      return {'raw_response': cleanResponse};
    } catch (e) {
      logger.e('‚ùå Erreur parsing JSON: $e');
      return {};
    }
  }

  /// Obtient les statistiques du service OpenAI
  static Future<Map<String, dynamic>> getServiceStats() async {
    try {
      await initialize();
      return {
        'isInitialized': _isInitialized,
        'apiKey': AIConfig.openaiApiKey.isNotEmpty ? '***${AIConfig.openaiApiKey.substring(AIConfig.openaiApiKey.length - 4)}' : 'Non configur√©',
        'model': AIConfig.openaiModel,
        'embeddingModel': AIConfig.embeddingModel,
        'enabled': AIConfig.isAIServicesEnabled,
      };
    } catch (e) {
      logger.e('‚ùå Erreur stats OpenAI: $e');
      return {
        'isInitialized': false,
        'error': e.toString(),
      };
    }
  }
  
  /// Test de connexion √† l'API OpenAI
  static Future<bool> testConnection() async {
    try {
      await initialize();
      
      logger.d('üîß Test de connexion OpenAI...');
      logger.d('  - Cl√© API: ${AIConfig.openaiApiKey.substring(0, 10)}...');
      logger.d('  - Longueur cl√©: ${AIConfig.openaiApiKey.length}');
      logger.d('  - Mod√®le: ${AIConfig.openaiModel}');
      logger.d('  - Cl√© valide: ${AIConfig.openaiApiKey.startsWith('sk-')}');
      
      // V√©rification pr√©alable
      if (AIConfig.openaiApiKey == 'YOUR_OPENAI_API_KEY' || AIConfig.openaiApiKey.isEmpty) {
        logger.e('‚ùå Cl√© API non configur√©e');
        return false;
      }
      
      if (!AIConfig.openaiApiKey.startsWith('sk-')) {
        logger.e('‚ùå Format de cl√© API invalide');
        return false;
      }
      
      logger.d('üîß Tentative d\'appel API...');
      
      final completion = await OpenAI.instance.chat.create(
        model: AIConfig.openaiModel,
        messages: [
          OpenAIChatCompletionChoiceMessageModel(
            role: OpenAIChatMessageRole.user,
            content: 'Test de connexion - r√©ponds juste "OK"',
          ),
        ],
        maxTokens: 10,
        temperature: 0.1,
      );
      
      final response = completion.choices.first.message.content.trim();
      logger.d('‚úÖ Connexion OpenAI r√©ussie: "$response"');
      return true;
    } catch (e) {
      logger.e('‚ùå Erreur test connexion OpenAI: $e');
      logger.e('‚ùå Type d\'erreur: ${e.runtimeType}');
      if (e.toString().contains('html')) {
        logger.e('‚ùå L\'API retourne du HTML au lieu de JSON');
      }
      return false;
    }
  }
} 